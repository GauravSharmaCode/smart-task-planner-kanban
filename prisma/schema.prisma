generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  basic
  premium
}

enum TaskStatus {
  todo
  in_progress
  done
}

enum TaskPriority {
  low
  medium
  high
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(basic)
  createdAt DateTime @default(now())

  tasks         Task[]
  categories    Category[]
  activityLogs  ActivityLog[]
  auditLogs     AuditLog[]

  @@map("users")
}

model Task {
  id          String       @id @default(uuid())
  userId      String
  categoryId  String?
  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus   @default(todo)
  priority    TaskPriority @default(medium)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])

  @@map("tasks")
}

model Category {
  id        String   @id @default(uuid())
  userId    String
  name      String
  color     String?
  createdAt DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@map("categories")
}

model ActivityLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  entity    String
  entityId  String
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String
  method      String
  endpoint    String
  statusCode  Int
  requestTime DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}